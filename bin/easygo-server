#!/usr/bin/env node

const cli = require('../lib/cli');
const fs = require('fs');
const path = require('path');
const boilerplate = require('mip-cli-boilerplate');
const shell = require("shelljs");

const args = cli.setup({
    noArgs: true,
    options: [
        ['-p, --port <n>', '启动端口号', parseInt],
        ['-f, --force', '强制启动，关闭占用端口的进程'],
        ['-l, --livereload <value>', '启用调试自动刷新']
    ],
    help: [
          '启动MIP调试服务器',
          '    $ mip server',
      ].join('\n')
});

var dev = "npm run dev"
var buid = "cross-env NODE_ENV=production webpack --progress --hide-modules"

var defaultConfig = require(boilerplate.TEMPLATE_DIR + '/mip.config');

defaultConfig.baseDir = process.cwd();

console.log(process.cwd());

var configPath = path.join(defaultConfig.baseDir, 'mip.config');

// // 加载用户定义配置
// if (fs.existsSync(configPath)) {

//     Object.assign(defaultConfig, require(configPath));
//     // 设置是否extensions目录，用于调试时启用不同的配置
//     defaultConfig.isExtensionsDir = defaultConfig.extensionsDir === '.';

// }


// cli 配置
if (cli.program.port) {
    defaultConfig.port = cli.program.port;
}



// 强制启动，关闭占用端口的进程
if (cli.program.force) {
    require('../lib/util/kill-process-byport')({
        port: defaultConfig.port
    })
        .then(() => {
            shell.exec(dev);
        }, error => {
            cli.error(error);
        });
}
else {
    //
    shell.exec(dev);
}

